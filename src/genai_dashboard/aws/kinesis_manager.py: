"""
Kinesis Stream Manager
~~~~~~~~~~~~~~~~~~~
Manages real-time data streams from sales systems.
"""

import boto3
import json
from datetime import datetime
from typing import Dict, List
import logging

class KinesisManager:
    def __init__(self, stream_name: str, region: str = 'us-east-1'):
        self.stream_name = stream_name
        self.client = boto3.client('kinesis', region_name=region)
        self.logger = logging.getLogger(__name__)

    def initialize_stream(self):
        """Initialize Kinesis stream for real-time data."""
        try:
            self.client.create_stream(
                StreamName=self.stream_name,
                ShardCount=1
            )
            self.logger.info(f"Created stream: {self.stream_name}")
        except self.client.exceptions.ResourceInUseException:
            self.logger.info(f"Stream {self.stream_name} already exists")

    def put_sales_record(self, sale_data: Dict):
        """
        Put individual sale record into stream.
        
        Previous: Batch processing every 5 days
        Current: Real-time processing per transaction
        """
        try:
            response = self.client.put_record(
                StreamName=self.stream_name,
                Data=json.dumps(sale_data),
                PartitionKey=str(sale_data.get('sale_id', datetime.now().timestamp()))
            )
            return response['SequenceNumber']
        except Exception as e:
            self.logger.error(f"Failed to put record: {e}")
            raise

    def get_metrics(self) -> Dict:
        """Get stream metrics and performance data."""
        try:
            metrics = self.client.describe_stream_summary(
                StreamName=self.stream_name
            )
            return {
                'status': metrics['StreamDescriptionSummary']['StreamStatus'],
                'shards': metrics['StreamDescriptionSummary']['OpenShardCount'],
                'retention_hours': metrics['StreamDescriptionSummary']['RetentionPeriodHours'],
                'enhanced_monitoring': metrics['StreamDescriptionSummary']['EnhancedMonitoring']
            }
        except Exception as e:
            self.logger.error(f"Failed to get metrics: {e}")
            raise
