"""
Real-Time Sales Forecasting System
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Demonstrates elimination of reporting lag using an ensemble of models
(Prophet, LSTM, and XGBoost) for robust, production-grade predictions.

Author: Yunbo Cheng
Date: 2025
"""

import pandas as pd
import numpy as np
from typing import Dict, Tuple
from datetime import datetime, timedelta
import logging

# Forecasting Models
from prophet import Prophet
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_percentage_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
import xgboost as xgb

# Visualization
import matplotlib.pyplot as plt


class SalesForecaster:
    """
    Real-time sales forecasting engine using ensemble models:
    - Prophet (time series with seasonality)
    - LSTM (deep learning sequence model)
    - XGBoost (tree-based regression on features)
    """

    def __init__(self, config: Dict = None):
        """
        Initialize sales forecaster with configurable parameters.

        Args:
            config (dict): Custom model configurations (optional).
        """
        self.config = config or {
            "prophet_params": {
                "changepoint_prior_scale": 0.05,
                "seasonality_prior_scale": 10,
                "seasonality_mode": "multiplicative",
            },
            "lstm_params": {
                "units": 50,
                "dropout": 0.2,
                "epochs": 100,
                "batch_size": 32,
            },
            "xgb_params": {
                "max_depth": 7,
                "eta": 0.1,
                "objective": "reg:squarederror",
                "n_estimators": 200,
            },
            "ensemble_weights": {"prophet": 0.4, "lstm": 0.3, "xgb": 0.3},
        }

        self.logger = logging.getLogger(__name__)
        self.scaler = MinMaxScaler()
        self._initialize_models()

    def _initialize_models(self) -> None:
        """Initialize Prophet, LSTM, and XGBoost models."""
        self.prophet_model = Prophet(**self.config["prophet_params"])

        self.lstm_model = Sequential(
            [
                LSTM(
                    units=self.config["lstm_params"]["units"],
                    return_sequences=True,
                    input_shape=(5, 1),
                ),
                Dropout(self.config["lstm_params"]["dropout"]),
                LSTM(units=self.config["lstm_params"]["units"] // 2),
                Dropout(self.config["lstm_params"]["dropout"]),
                Dense(1),
            ]
        )
        self.lstm_model.compile(optimizer="adam", loss="mse")

        self.xgb_model = xgb.XGBRegressor(**self.config["xgb_params"])

    def prepare_data(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Prepare historical sales data with features and lags.
